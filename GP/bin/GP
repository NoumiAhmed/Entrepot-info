#!/usr/bin/env ruby
require 'gli'
require 'fileutils'
begin # XXX: Remove this begin/rescue before distributing your app
require 'GP'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/GP` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/GP now"
  exit 64
end

include GLI::App


DEPOT_DEFAUT = '.depot.txt' # Fichier par defaut pour depot.


program_desc "Application pour gestion de depot de pieces informatiques"
version GP::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Donnes pour depot de pieces informatique'
default_value DEPOT_DEFAUT
flag :depot
arg_name 'nom_de_fichier'

GP::BaseDeDonnees.init(DEPOT_DEFAUT)

##############################################################
# Specifications des diverses commandes
# (presentees en ordre alphabatique)
##############################################################

desc 'lister toutes les pieces disponibles dans le depot dans l\'ordre croissant des numero de serie'
command :lister do |lister|
  
  lister.desc 'Prend format pour l\'affichage'
  lister.flag :format, :arg_name => 'le_format'
  
  lister.action do |_global_options,*options,args|
   #le_format = options[:format]
  
    listing = GP::BaseDeDonnees
    .les_pieces
    .map {|p| p.to_s() << "\n" }
    .join

  puts listing unless listing.empty?

  end
end


desc 'trouver les pieces qui matchent un motif'
arg_name 'motif'
command :trouver do |trouver|
  trouver.desc 'Format a utiliser pour l\'affichage des items trouves'
  trouver.flag :format
  
  trouver.action do |global_options,options,args|
   format = options[:format]

   motif = args.shift
   erreur_nb_arguments "trouver" unless motif

   selection = ->(c) { /#{motif}/i =~ c.noSerie}
   erreur "NoSerie doit etre une lettre suivie de 5 chiffres!!!!!" unless GP::Motifs::NOSERIE =~ motif
  
  liste_piec   = GP::BaseDeDonnees
    .les_pieces.map { |piece| piece.to_s(format) + "\n" }
    .join

   puts liste_pieces unless liste_pieces.empty?

   erreur "Arguments en trop" unless args.empty?

  end
end


desc 'retire une piece du depot des pieces'
arg_name '[noSerie]...'
command :retirer do |retirer|
  retirer.action do |global_options,options,args|
    erreur "Arguments en trop" if args.size > 1
    les_noSerie_a_supprimer(args).each do |noSerie|
    les_pieces = GP::BaseDeDonnees.piece(noSerie)
    erreur "Aucune piece avec le numero de serie '#{noSerie}'" unless les_pieces
    GP::BaseDeDonnees.retirer les_pieces
   end    

  end
end

desc 'Deposer une nouvelle piece dans le depot des pieces le numero de seri doit etre une lettre suivi de 5 chiffre et type doit etre dans CPU, RAM ou DISK'
arg_name '[piece]...'
command :deposer do |deposer|
  deposer.action do |_global_options,_options,args|
  erreur_nb_arguments args unless args.size == 0 || args.size >= 3

  les_pieces_a_ajouter(args).each do |noSerie, type, description|
  erreur "NoSerie incorrect: #{noSerie}" unless GP::Motifs::NOSERIE =~ noSerie
  erreur "Type incorrect #{type}" unless GP::Motifs::TYPE =~ type

  piece_avec_noSerie = GP::BaseDeDonnees.piece(noSerie)
  erreur "une piece avec le meme numero de serie existe deja" if piece_avec_noSerie
    
     GP::BaseDeDonnees
      .deposer(noSerie.to_sym, type, description)
    end
  end
end




desc "Cree une nouvelle base de donnees pour gerer des cours (dans './#{DEPOT_DEFAUT}' si --depot n'est pas specifie)"
skips_pre
skips_post
command :init do |init|
  init.desc 'Indique de detruire le fichier si il existe deja'
  init.switch :detruire
  init.action do |global,options,args|
    GP::BaseDeDonnees
      .init( global[:depot], options[:detruire] )
  end
end



#########################################################
#Methodes pour traitement des erreurs
#########################################################

def erreur( msg )
  exit_now! "*** Erreur: #{msg}"
end

def erreur_nb_arguments( *args )
  erreur "Nombre incorrect d'arguments: <<#{args.join(' ')}>>"
end

on_error do |exception|
  STDERR.puts "Exception signalee dans bin/gp!!"
  STDERR.puts "exception = #{exception.inspect}"
  STDERR.puts exception.backtrace

 false
end

##########################################################
#Patrons et methodes auxiliaires pour traitement de stdin
##########################################################

def piece_lu( ligne )
  m = GP::Motifs::PIECE.match ligne.strip

  erreur "Format incorrect: '#{ligne}' =~#{GA::Motifs::PIECE.inspect}" unless m
  erreur "Nombre incorrect d'arguments: '#{ligne}'" unless m.post_match.empty?

  noSerie, type, description = m.captures

  [noSerie, type, supprimer_guillemets(description)]
end

def les_pieces_a_ajouter( args )
 return [args] unless args.empty?

 STDIN.readlines
 .reject { |ligne| ligne.strip.empty? }
 .map { |ligne| piece_lu( ligne.chomp ) }
end

def noSerie_lu( ligne )
 m = GP::Motifs::NOSERIE.match( ligne.strip )

 erreur "Format de donnees incorrect: '#{ligne}' =~ '#{GP::Motifs::NOSERIE.inspect}'" unless m
 erreur "Format incorrect d'arguments: '#{ligne}'" unless m.post_match.empty?

 supprimer_guillemets m[0]
end

def les_noSerie_a_supprimer( args )
 return [args.shift] unless args.empty?

 STDIN.readlines
  .reject { |ligne| ligne.strip.empty? }
  .flat_map { |ligne| ligne.split.map { |noSerie| noSerie_lu( noSerie.chomp ) } }
end

def supprimer_guillemets( a )
  /['"]/ =~ a[0] ? a[1..-2] : a
end

########################################################
#Pre/post hook des commandes et lancement du programme
########################################################

pre do |global,command,options,args|
  GP::BaseDeDonnees.charger( global[:depot] )
  true
end

post do |global,command,options,args|
  GP::BaseDeDonnees.sauver
end



exit run(ARGV)
